###
 0000000  000000000  00000000   000  000   000   0000000   000  00000000  000   000
000          000     000   000  000  0000  000  000        000  000        000 000 
0000000      000     0000000    000  000 0 000  000  0000  000  000000      00000  
     000     000     000   000  000  000  0000  000   000  000  000          000   
0000000      000     000   000  000  000   000   0000000   000  000          000   
###

defaults =
    ext:      '.noon' # output format
    indent:   4       # number of spaces per indent level
    align:    true    # vertically align object values
    maxalign: 32      # maximal number of spaces when aligning
    sort:     false   # sort object keys alphabetically
    circular: false   # check for circular references (expensive!)
    null:     false   # output null dictionary values
    colors:   false   # colorize output with ansi colors
                      # true for default colors or custom dictionary
    
regs = 
    url:    new RegExp '^(https?|git|file)(://)(\\S+)$'
    path:   new RegExp '^([\\.\\/\\S]+)(\\/\\S+)$'
    semver: new RegExp '\\d+\\.\\d+\\.\\d+'

pad = (s, l) -> 
    while s.length < l
        s += ' '
    s
    
stringify = (obj, options={}) ->

    def = (o,d) ->
        r = {}
        for k,v of o
            r[k] = v
        for k,v of d
            r[k] = v if not r[k]?
        r

    opt = def options, defaults
    
    #       000   0000000   0000000   000   000
    #       000  000       000   000  0000  000
    #       000  0000000   000   000  000 0 000
    # 000   000       000  000   000  000  0000
    #  0000000   0000000    0000000   000   000
        
    if opt.ext == '.json'
        cs = JSON.stringify obj, null, opt.indent
        if opt.colors
            return require('klor').syntax text:cs, ext:opt.ext
        else
            return cs
    
    if opt.indent is 'string' 
        opt.indent = opt.indent.length
        
    indstr = pad '' opt.indent
            
    # 00000000   0000000   0000000   0000000   00000000   00000000
    # 000       000       000       000   000  000   000  000     
    # 0000000   0000000   000       000000000  00000000   0000000 
    # 000            000  000       000   000  000        000     
    # 00000000  0000000    0000000  000   000  000        00000000

    escape = (k, arry) ->
        if 0 <= k.indexOf '\n'
            sp = k.split '\n'
            es = sp.map (s) -> escape(s, arry)
            es.unshift '...'
            es.push '...'
            return es.join '\n'
        if k == '' or k == '...' or k[0] in [' ' '#' '|'] or k[k.length-1] in [' ' '#' '|'] 
            k = '|' + k + '|'
        else if arry and /\ \ /.test k
            k = '|' + k + '|'
        k
    
    # 00000000   00000000   00000000  000000000  000000000  000   000
    # 000   000  000   000  000          000        000      000 000 
    # 00000000   0000000    0000000      000        000       00000  
    # 000        000   000  000          000        000        000   
    # 000        000   000  00000000     000        000        000   
    
    pretty = (o, ind, visited) ->
        
        if opt.align        
            maxKey = opt.indent
            if Object.keys(o).length > 1
                for k,v of o
                    if o.hasOwnProperty k
                        kl = parseInt(Math.ceil((k.length+2)/opt.indent)*opt.indent)
                        maxKey = Math.max maxKey, kl
                        if opt.maxalign and (maxKey > opt.maxalign)
                            maxKey = opt.maxalign
                            break
        l = []
        
        keyValue = (k,v) ->
            s = ind
            k = escape k, true
            if k.indexOf('  ') > 0 and k[0] != '|'
                k = "|#{k}|"
            else if k[0] != '|' and k[k.length-1] == '|'
                k = '|' + k
            else if k[0] == '|' and k[k.length-1] != '|'
                k += '|'
            
            if opt.align
                ks = pad k, Math.max maxKey, k.length+2
                i  = pad ind+indstr, maxKey
            else
                ks = pad k, k.length+2
                i  = ind+indstr
            s += ks
            vs = toStr v, i, false, visited
            if vs[0] == '\n'
                while s[s.length-1] == ' '
                    s = s.substr 0, s.length-1                
            s += vs
            while s[s.length-1] == ' '
                s = s.substr 0, s.length-1
            s

        if opt.sort
            for k in Object.keys(o).sort()
                l.push keyValue k, o[k]
        else
            for k,v of o
                if o.hasOwnProperty k
                    l.push keyValue k, v
            
        l.join '\n'

    # 000000000   0000000    0000000  000000000  00000000 
    #    000     000   000  000          000     000   000
    #    000     000   000  0000000      000     0000000  
    #    000     000   000       000     000     000   000
    #    000      0000000   0000000      000     000   000
    
    toStr = (o, ind='', arry=false, visited=[]) ->
        
        if not o? 
            if o == null
                return opt.null or arry and "null" or ''
            if o == undefined
                return "undefined"
            return '<?>'
            
        switch t = typeof o
            
            when 'string' 
                return escape o, arry
                
            when 'object'
                if opt.circular
                    if o in visited
                        return '<v>'
                    visited.push o
                    
                if o.constructor?.name == 'Array'
                    s = ind!='' and arry and '.' or ''
                    s += '\n' if o.length and ind!=''
                    s += (ind+toStr(v,ind+indstr,true,visited) for v in o).join '\n'
                else if o.constructor?.name == 'RegExp'
                    return o.source
                else
                    s = (arry and '.\n') or ((ind != '') and '\n' or '')
                    s += pretty o, ind, visited
                return s
            else
                return String o
        return '<???>'

    s = toStr obj
    if opt.colors
        s = require('klor').syntax text:s, ext:'noon'
    s

module.exports = stringify
