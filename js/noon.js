// koffee 0.56.0

/*
000   000   0000000    0000000   000   000
0000  000  000   000  000   000  0000  000
000 0 000  000   000  000   000  000 0 000
000  0000  000   000  000   000  000  0000
000   000   0000000    0000000   000   000
 */
var args, d, e, err, ext, fs, load, noon, o, pad, parse, path, ref, ref1, save, stringify,
    indexOf = [].indexOf;

fs = require('fs');

path = require('path');

pad = require('lodash.pad');

stringify = require('./stringify');

parse = require('./parse');

load = require('./load');

save = require('./save');

noon = require('./main');

args = require('karg')("noon\n    file        . ? the file to convert             . * . = package.json\n    output      . ? output file or filetype         . = noon\n    indent      . ? indentation length              . = 4\n    align       . ? align values                    . = true\n    maxalign    . ? max align width, 0: no limit    . = 32\n    sort        . ? sort keys alphabetically        . = false\n    colors      . ? output with ansi colors         . = true\n    type        . ? input filetype\n\nsupported filetypes:\n    " + (noon.extnames.join('\n    ')) + "\n\nversion   " + (require(__dirname + "/../package.json").version));

err = function(msg) {
    console.log(("\n" + msg + "\n").red);
    return process.exit();
};

if (args.file) {
    ext = path.extname(args.file);
    try {
        d = load(args.file, args.type);
    } catch (error) {
        e = error;
        err(e.stack);
    }
    if (ref = args.output, indexOf.call(noon.extensions, ref) >= 0) {
        args.output = '.' + args.output;
    }
    if (ref1 = args.output, indexOf.call(noon.extnames, ref1) >= 0) {
        if (args.output === '.noon') {
            o = {
                align: args.align,
                indent: Math.max(1, args.indent),
                maxalign: Math.max(0, args.maxalign),
                colors: args.colors,
                sort: args.sort
            };
        } else {
            o = {
                ext: args.output,
                colors: args.colors,
                indent: pad('', args.indent)
            };
        }
        console.log(stringify(d, o));
    } else {
        if (path.extname(args.output) === '.noon') {
            o = {
                align: args.align,
                indent: Math.max(1, args.indent),
                maxalign: Math.max(0, args.maxalign),
                colors: false,
                sort: args.sort
            };
        } else {
            o = {
                indent: pad('', args.indent)
            };
        }
        save(args.output, d, o);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9vbi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEscUZBQUE7SUFBQTs7QUFRQSxFQUFBLEdBQVksT0FBQSxDQUFRLElBQVI7O0FBQ1osSUFBQSxHQUFZLE9BQUEsQ0FBUSxNQUFSOztBQUNaLEdBQUEsR0FBWSxPQUFBLENBQVEsWUFBUjs7QUFDWixTQUFBLEdBQVksT0FBQSxDQUFRLGFBQVI7O0FBQ1osS0FBQSxHQUFZLE9BQUEsQ0FBUSxTQUFSOztBQUNaLElBQUEsR0FBWSxPQUFBLENBQVEsUUFBUjs7QUFDWixJQUFBLEdBQVksT0FBQSxDQUFRLFFBQVI7O0FBQ1osSUFBQSxHQUFZLE9BQUEsQ0FBUSxRQUFSOztBQVFaLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUFBLENBQWdCLGtnQkFBQSxHQVlsQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBZCxDQUFtQixRQUFuQixDQUFELENBWmtCLEdBWVcsZ0JBWlgsR0FjWixDQUFDLE9BQUEsQ0FBVyxTQUFELEdBQVcsa0JBQXJCLENBQXVDLENBQUMsT0FBekMsQ0FkSjs7QUFpQlAsR0FBQSxHQUFNLFNBQUMsR0FBRDtJQUNILE9BQUEsQ0FBQyxHQUFELENBQUssQ0FBQyxJQUFBLEdBQUssR0FBTCxHQUFTLElBQVYsQ0FBZSxDQUFDLEdBQXJCO1dBQ0MsT0FBTyxDQUFDLElBQVIsQ0FBQTtBQUZFOztBQUlOLElBQUcsSUFBSSxDQUFDLElBQVI7SUFFSSxHQUFBLEdBQU0sSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFJLENBQUMsSUFBbEI7QUFFTjtRQUNJLENBQUEsR0FBSSxJQUFBLENBQUssSUFBSSxDQUFDLElBQVYsRUFBZ0IsSUFBSSxDQUFDLElBQXJCLEVBRFI7S0FBQSxhQUFBO1FBRU07UUFDRixHQUFBLENBQUksQ0FBQyxDQUFDLEtBQU4sRUFISjs7SUFLQSxVQUFHLElBQUksQ0FBQyxNQUFMLEVBQUEsYUFBZSxJQUFJLENBQUMsVUFBcEIsRUFBQSxHQUFBLE1BQUg7UUFDSSxJQUFJLENBQUMsTUFBTCxHQUFjLEdBQUEsR0FBSSxJQUFJLENBQUMsT0FEM0I7O0lBR0EsV0FBRyxJQUFJLENBQUMsTUFBTCxFQUFBLGFBQWUsSUFBSSxDQUFDLFFBQXBCLEVBQUEsSUFBQSxNQUFIO1FBQ0ksSUFBRyxJQUFJLENBQUMsTUFBTCxLQUFlLE9BQWxCO1lBQ0ksQ0FBQSxHQUNJO2dCQUFBLEtBQUEsRUFBWSxJQUFJLENBQUMsS0FBakI7Z0JBQ0EsTUFBQSxFQUFZLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLElBQUksQ0FBQyxNQUFqQixDQURaO2dCQUVBLFFBQUEsRUFBWSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFJLENBQUMsUUFBakIsQ0FGWjtnQkFHQSxNQUFBLEVBQVksSUFBSSxDQUFDLE1BSGpCO2dCQUlBLElBQUEsRUFBWSxJQUFJLENBQUMsSUFKakI7Y0FGUjtTQUFBLE1BQUE7WUFRSSxDQUFBLEdBQ0k7Z0JBQUEsR0FBQSxFQUFZLElBQUksQ0FBQyxNQUFqQjtnQkFDQSxNQUFBLEVBQVksSUFBSSxDQUFDLE1BRGpCO2dCQUVBLE1BQUEsRUFBWSxHQUFBLENBQUksRUFBSixFQUFRLElBQUksQ0FBQyxNQUFiLENBRlo7Y0FUUjs7UUFZQSxPQUFBLENBQUEsR0FBQSxDQUFJLFNBQUEsQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFKLEVBYko7S0FBQSxNQUFBO1FBZUksSUFBRyxJQUFJLENBQUMsT0FBTCxDQUFhLElBQUksQ0FBQyxNQUFsQixDQUFBLEtBQTZCLE9BQWhDO1lBQ0ksQ0FBQSxHQUNJO2dCQUFBLEtBQUEsRUFBWSxJQUFJLENBQUMsS0FBakI7Z0JBQ0EsTUFBQSxFQUFZLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLElBQUksQ0FBQyxNQUFqQixDQURaO2dCQUVBLFFBQUEsRUFBWSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFJLENBQUMsUUFBakIsQ0FGWjtnQkFHQSxNQUFBLEVBQVksS0FIWjtnQkFJQSxJQUFBLEVBQVksSUFBSSxDQUFDLElBSmpCO2NBRlI7U0FBQSxNQUFBO1lBUUksQ0FBQSxHQUNJO2dCQUFBLE1BQUEsRUFBWSxHQUFBLENBQUksRUFBSixFQUFRLElBQUksQ0FBQyxNQUFiLENBQVo7Y0FUUjs7UUFVQSxJQUFBLENBQUssSUFBSSxDQUFDLE1BQVYsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUF6Qko7S0FaSiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwXG4wMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDBcbjAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwXG4wMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiMjI1xuXG5mcyAgICAgICAgPSByZXF1aXJlICdmcydcbnBhdGggICAgICA9IHJlcXVpcmUgJ3BhdGgnXG5wYWQgICAgICAgPSByZXF1aXJlICdsb2Rhc2gucGFkJ1xuc3RyaW5naWZ5ID0gcmVxdWlyZSAnLi9zdHJpbmdpZnknXG5wYXJzZSAgICAgPSByZXF1aXJlICcuL3BhcnNlJ1xubG9hZCAgICAgID0gcmVxdWlyZSAnLi9sb2FkJ1xuc2F2ZSAgICAgID0gcmVxdWlyZSAnLi9zYXZlJ1xubm9vbiAgICAgID0gcmVxdWlyZSAnLi9tYWluJ1xuXG4jICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMFxuIyAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwICAwMDAwMDAwXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDBcblxuYXJncyA9IHJlcXVpcmUoJ2thcmcnKSBcIlwiXCJcbm5vb25cbiAgICBmaWxlICAgICAgICAuID8gdGhlIGZpbGUgdG8gY29udmVydCAgICAgICAgICAgICAuICogLiA9IHBhY2thZ2UuanNvblxuICAgIG91dHB1dCAgICAgIC4gPyBvdXRwdXQgZmlsZSBvciBmaWxldHlwZSAgICAgICAgIC4gPSBub29uXG4gICAgaW5kZW50ICAgICAgLiA/IGluZGVudGF0aW9uIGxlbmd0aCAgICAgICAgICAgICAgLiA9IDRcbiAgICBhbGlnbiAgICAgICAuID8gYWxpZ24gdmFsdWVzICAgICAgICAgICAgICAgICAgICAuID0gdHJ1ZVxuICAgIG1heGFsaWduICAgIC4gPyBtYXggYWxpZ24gd2lkdGgsIDA6IG5vIGxpbWl0ICAgIC4gPSAzMlxuICAgIHNvcnQgICAgICAgIC4gPyBzb3J0IGtleXMgYWxwaGFiZXRpY2FsbHkgICAgICAgIC4gPSBmYWxzZVxuICAgIGNvbG9ycyAgICAgIC4gPyBvdXRwdXQgd2l0aCBhbnNpIGNvbG9ycyAgICAgICAgIC4gPSB0cnVlXG4gICAgdHlwZSAgICAgICAgLiA/IGlucHV0IGZpbGV0eXBlXG5cbnN1cHBvcnRlZCBmaWxldHlwZXM6XG4gICAgI3tub29uLmV4dG5hbWVzLmpvaW4gJ1xcbiAgICAnfVxuXG52ZXJzaW9uICAgI3tyZXF1aXJlKFwiI3tfX2Rpcm5hbWV9Ly4uL3BhY2thZ2UuanNvblwiKS52ZXJzaW9ufVxuXCJcIlwiXG5cbmVyciA9IChtc2cpIC0+XG4gICAgbG9nIChcIlxcblwiK21zZytcIlxcblwiKS5yZWRcbiAgICBwcm9jZXNzLmV4aXQoKVxuXG5pZiBhcmdzLmZpbGVcblxuICAgIGV4dCA9IHBhdGguZXh0bmFtZSBhcmdzLmZpbGVcblxuICAgIHRyeVxuICAgICAgICBkID0gbG9hZCBhcmdzLmZpbGUsIGFyZ3MudHlwZVxuICAgIGNhdGNoIGVcbiAgICAgICAgZXJyIGUuc3RhY2tcblxuICAgIGlmIGFyZ3Mub3V0cHV0IGluIG5vb24uZXh0ZW5zaW9uc1xuICAgICAgICBhcmdzLm91dHB1dCA9ICcuJythcmdzLm91dHB1dFxuXG4gICAgaWYgYXJncy5vdXRwdXQgaW4gbm9vbi5leHRuYW1lc1xuICAgICAgICBpZiBhcmdzLm91dHB1dCA9PSAnLm5vb24nXG4gICAgICAgICAgICBvPVxuICAgICAgICAgICAgICAgIGFsaWduOiAgICAgIGFyZ3MuYWxpZ25cbiAgICAgICAgICAgICAgICBpbmRlbnQ6ICAgICBNYXRoLm1heCAxLCBhcmdzLmluZGVudFxuICAgICAgICAgICAgICAgIG1heGFsaWduOiAgIE1hdGgubWF4IDAsIGFyZ3MubWF4YWxpZ25cbiAgICAgICAgICAgICAgICBjb2xvcnM6ICAgICBhcmdzLmNvbG9yc1xuICAgICAgICAgICAgICAgIHNvcnQ6ICAgICAgIGFyZ3Muc29ydFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvID1cbiAgICAgICAgICAgICAgICBleHQ6ICAgICAgICBhcmdzLm91dHB1dFxuICAgICAgICAgICAgICAgIGNvbG9yczogICAgIGFyZ3MuY29sb3JzXG4gICAgICAgICAgICAgICAgaW5kZW50OiAgICAgcGFkICcnLCBhcmdzLmluZGVudFxuICAgICAgICBsb2cgc3RyaW5naWZ5IGQsIG9cbiAgICBlbHNlXG4gICAgICAgIGlmIHBhdGguZXh0bmFtZShhcmdzLm91dHB1dCkgPT0gJy5ub29uJ1xuICAgICAgICAgICAgbyA9XG4gICAgICAgICAgICAgICAgYWxpZ246ICAgICAgYXJncy5hbGlnblxuICAgICAgICAgICAgICAgIGluZGVudDogICAgIE1hdGgubWF4IDEsIGFyZ3MuaW5kZW50XG4gICAgICAgICAgICAgICAgbWF4YWxpZ246ICAgTWF0aC5tYXggMCwgYXJncy5tYXhhbGlnblxuICAgICAgICAgICAgICAgIGNvbG9yczogICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgc29ydDogICAgICAgYXJncy5zb3J0XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG8gPVxuICAgICAgICAgICAgICAgIGluZGVudDogICAgIHBhZCAnJywgYXJncy5pbmRlbnRcbiAgICAgICAgc2F2ZSBhcmdzLm91dHB1dCwgZCwgb1xuIl19
//# sourceURL=../coffee/noon.coffee