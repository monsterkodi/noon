// koffee 1.3.0

/*
 0000000  000000000  00000000   000  000   000   0000000   000  00000000  000   000
000          000     000   000  000  0000  000  000        000  000        000 000 
0000000      000     0000000    000  000 0 000  000  0000  000  000000      00000  
     000     000     000   000  000  000  0000  000   000  000  000          000   
0000000      000     000   000  000  000   000   0000000   000  000          000
 */
var defaults, regs, rpad, stringify,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf;

defaults = {
    ext: '.noon',
    indent: 4,
    align: true,
    maxalign: 32,
    sort: false,
    circular: false,
    "null": false,
    colors: false
};

regs = {
    url: new RegExp('^(https?|git|file)(://)(\\S+)$'),
    path: new RegExp('^([\\.\\/\\S]+)(\\/\\S+)$'),
    semver: new RegExp('\\d+\\.\\d+\\.\\d+')
};

rpad = function(s, l) {
    while (s.length < l) {
        s += ' ';
    }
    return s;
};

stringify = function(obj, options) {
    var cs, def, escape, indstr, opt, pretty, s, toStr;
    if (options == null) {
        options = {};
    }
    def = function(o, d) {
        var k, r, v;
        r = {};
        for (k in o) {
            v = o[k];
            r[k] = v;
        }
        for (k in d) {
            v = d[k];
            if (r[k] == null) {
                r[k] = v;
            }
        }
        return r;
    };
    opt = def(options, defaults);
    switch (opt.ext) {
        case '.json':
            cs = JSON.stringify(obj, null, opt.indent);
            break;
        case '.yml':
        case '.yaml':
            cs = require('js-yaml').dump(obj);
    }
    if (cs) {
        if (opt.colors) {
            return require('klor').syntax({
                text: cs,
                ext: opt.ext
            });
        } else {
            return cs;
        }
    }
    if (typeof opt.indent === 'string') {
        opt.indent = opt.indent.length;
    }
    indstr = rpad('', opt.indent);
    escape = function(k, arry) {
        var es, ref, ref1, sp;
        if (0 <= k.indexOf('\n')) {
            sp = k.split('\n');
            es = sp.map(function(s) {
                return escape(s, arry);
            });
            es.unshift('...');
            es.push('...');
            return es.join('\n');
        }
        if (k === '' || k === '...' || ((ref = k[0]) === ' ' || ref === '#' || ref === '|') || ((ref1 = k[k.length - 1]) === ' ' || ref1 === '#' || ref1 === '|')) {
            k = '|' + k + '|';
        } else if (arry && /\ \ /.test(k)) {
            k = '|' + k + '|';
        }
        return k;
    };
    pretty = function(o, ind, visited) {
        var j, k, keyValue, kl, l, len, maxKey, ref, v;
        if (opt.align) {
            maxKey = opt.indent;
            if (Object.keys(o).length > 1) {
                for (k in o) {
                    if (!hasProp.call(o, k)) continue;
                    v = o[k];
                    kl = parseInt(Math.ceil((k.length + 2) / opt.indent) * opt.indent);
                    maxKey = Math.max(maxKey, kl);
                    if (opt.maxalign && (maxKey > opt.maxalign)) {
                        maxKey = opt.maxalign;
                        break;
                    }
                }
            }
        }
        l = [];
        keyValue = function(k, v) {
            var i, ks, s, vs;
            s = ind;
            k = escape(k, true);
            if (k.indexOf('  ') > 0 && k[0] !== '|') {
                k = "|" + k + "|";
            } else if (k[0] !== '|' && k[k.length - 1] === '|') {
                k = '|' + k;
            } else if (k[0] === '|' && k[k.length - 1] !== '|') {
                k += '|';
            }
            if (opt.align) {
                ks = rpad(k, Math.max(maxKey, k.length + 2));
                i = rpad(ind + indstr, maxKey);
            } else {
                ks = rpad(k, k.length + 2);
                i = ind + indstr;
            }
            s += ks;
            vs = toStr(v, i, false, visited);
            if (vs[0] === '\n') {
                while (s[s.length - 1] === ' ') {
                    s = s.substr(0, s.length - 1);
                }
            }
            s += vs;
            while (s[s.length - 1] === ' ') {
                s = s.substr(0, s.length - 1);
            }
            return s;
        };
        if (opt.sort) {
            ref = Object.keys(o).sort();
            for (j = 0, len = ref.length; j < len; j++) {
                k = ref[j];
                l.push(keyValue(k, o[k]));
            }
        } else {
            for (k in o) {
                if (!hasProp.call(o, k)) continue;
                v = o[k];
                l.push(keyValue(k, v));
            }
        }
        return l.join('\n');
    };
    toStr = function(o, ind, arry, visited) {
        var ref, ref1, s, t, v;
        if (ind == null) {
            ind = '';
        }
        if (arry == null) {
            arry = false;
        }
        if (visited == null) {
            visited = [];
        }
        if (o == null) {
            if (o === null) {
                return opt["null"] || arry && "null" || '';
            }
            if (o === void 0) {
                return "undefined";
            }
            return '<?>';
        }
        switch (t = typeof o) {
            case 'string':
                return escape(o, arry);
            case 'object':
                if (opt.circular) {
                    if (indexOf.call(visited, o) >= 0) {
                        return '<v>';
                    }
                    visited.push(o);
                }
                if (((ref = o.constructor) != null ? ref.name : void 0) === 'Array') {
                    s = ind !== '' && arry && '.' || '';
                    if (o.length && ind !== '') {
                        s += '\n';
                    }
                    s += ((function() {
                        var j, len, results;
                        results = [];
                        for (j = 0, len = o.length; j < len; j++) {
                            v = o[j];
                            results.push(ind + toStr(v, ind + indstr, true, visited));
                        }
                        return results;
                    })()).join('\n');
                } else if (((ref1 = o.constructor) != null ? ref1.name : void 0) === 'RegExp') {
                    return o.source;
                } else {
                    s = (arry && '.\n') || ((ind !== '') && '\n' || '');
                    s += pretty(o, ind, visited);
                }
                return s;
            default:
                return String(o);
        }
        return '<???>';
    };
    s = toStr(obj);
    if (opt.colors) {
        s = require('klor').syntax({
            text: s,
            ext: 'noon'
        });
    }
    return s;
};

module.exports = stringify;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/stringify.coffee